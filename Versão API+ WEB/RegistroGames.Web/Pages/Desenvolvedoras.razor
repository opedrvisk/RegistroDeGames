@page "/Desenvolvedoras"
@using Microsoft.AspNetCore.Authorization
@inject DesenvolvedoraAPI desenvolvedoraAPI
@inject NavigationManager navigationManager

<PageTitle>Desenvolvedoras</PageTitle>

<MudStack Class="mt-4 mb-4" Row="true" Justify="Justify.SpaceBetween">
    <MudText Class="mb-4" Typo="Typo.h4">Desenvolvedoras cadastradas</MudText>
    <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
</MudStack>

@if (desenvolvedorasDaPagina is not null)
{
    <MudGrid>
        @foreach (var desenvolvedora in desenvolvedorasDaPagina)
        {
            <MudItem xs="3">
                <CardDesenvolvedora Desenvolvedora=desenvolvedora />
            </MudItem>
        }
    </MudGrid>
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}

@code {
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;
    private ICollection<DesenvolvedoraResponse>? desenvolvedorasDaPagina;
    private ICollection<DesenvolvedoraResponse>? listaCompleta = Enumerable.Empty<DesenvolvedoraResponse>().ToList();

    protected override async Task OnInitializedAsync()
    {
        listaCompleta = await desenvolvedoraAPI.GetDesenvolvedorasAsync();
        if (listaCompleta is not null)
        {
            listaCompleta = listaCompleta.OrderByDescending(d => d.Id).ToList();
            totalItens = listaCompleta.Count();
            totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
            this.PaginaMudou(1);
        }
    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        desenvolvedorasDaPagina = listaCompleta!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }
}