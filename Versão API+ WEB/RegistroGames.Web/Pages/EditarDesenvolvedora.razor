@page "/EditarDesenvolvedora/{NomeDesenvolvedora}"  

@inject DesenvolvedoraAPI desenvolvedoraAPI  
@inject NavigationManager navigationManager  
@inject ISnackbar Snackbar  

@if (Desenvolvedora is not null)  
{  
    <MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">  

        <MudText Class="mt-8" Typo="Typo.h4">Edição da Desenvolvedora</MudText>  

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">  

            <MudTextField Class="mt-4" T="string" Placeholder="Nome da Desenvolvedora"  
                          @bind-Value="Nome"  
                          Variant="Variant.Outlined"  
                          Required="true"  
                          RequiredError="Campo obrigatório." />  

            <MudTextField Class="mt-4" T="string" Placeholder="Descrição da desenvolvedora"  
                          @bind-Value="Bio"  
                          Variant="Variant.Outlined"  
                          Lines="4"  
                          Required="true"  
                          RequiredError="Campo obrigatório." />  

            <div class="d-flex align-center justify-space-between mt-4">  

                <MudRating  
                    @bind-SelectedValue="Classificacao"  
                    @onclick="AvaliarDesenvolvedora"/>  

                <div>  
                    <MudButton Variant="Variant.Filled"  
                               Color="Color.Primary"  
                               Disabled="@(!success)"  
                               Class="ml-auto"  
                               @onclick="Editar">  
                        Salvar  
                    </MudButton>  
                    <MudButton Variant="Variant.Filled"  
                               Color="Color.Warning"  
                               Class="ml-3"  
                               @onclick="Deletar">  
                        Excluir  
                    </MudButton>  
                    <MudButton Variant="Variant.Filled"  
                               Color="Color.Info"  
                               Class="ml-3"  
                               @onclick="VoltarParaListagem">  
                        Voltar  
                    </MudButton>  
                </div>  

            </div>  
        </MudForm>  
    </MudPaper>  
}  
else  
{  
    <MudProgressCircular Indeterminate="true"></MudProgressCircular>  
}  

@code {  
    bool success;  
    string[] errors = { };  
    MudForm? form;  
    public DesenvolvedoraResponse? Desenvolvedora { get; set; }  
    public string? Nome { get; set; } = string.Empty;  
    public string? Bio { get; set; } = string.Empty;  
    [Parameter]  
    public string? NomeDesenvolvedora { get; set; }  
    public int Classificacao { get; set; }  

    protected override async Task OnInitializedAsync()  
    {  
        Desenvolvedora = await desenvolvedoraAPI.GetDesenvolvedoraPorNomeAsync(NomeDesenvolvedora!);  
        if (Desenvolvedora is null)  
        {  
            Snackbar.Add("Desenvolvedora consultada não encontrada.", Severity.Error);  
            navigationManager.NavigateTo("/Desenvolvedoras");  
        }  
        Nome = Desenvolvedora!.Nome;  
        Bio = Desenvolvedora!.Bio;  
    }  
    private void VoltarParaListagem()  
    {  
        navigationManager.NavigateTo("/Desenvolvedoras");  
    }  

    protected async override Task OnParametersSetAsync()  
    {  
        Desenvolvedora = await desenvolvedoraAPI.GetDesenvolvedoraPorNomeAsync(NomeDesenvolvedora!);  
    }  

    private async Task Editar()  
    {  
        try  
        {  
            var requestEdit = new DesenvolvedoraRequestEdit(Desenvolvedora.Id, Nome, Bio,Desenvolvedora.FotoPerfil);  
            await desenvolvedoraAPI.UpdateDesenvolvedoraAsync(requestEdit);  
            Snackbar.Add("Desenvolvedora atualizada com sucesso!", Severity.Success);  
            navigationManager.NavigateTo("/Desenvolvedoras");  
        }  
        catch (Exception)  
        {  
            // Logger.LogInformation("Erro ao atualizar desenvolvedora!");  
        }  
    }  

    private async Task Deletar()  
    {  
        try  
        {  
            await desenvolvedoraAPI.DeleteDesenvolvedoraAsync(Desenvolvedora.Id);  
            Snackbar.Add("Desenvolvedora excluída com sucesso!", Severity.Success);  
            navigationManager.NavigateTo("/Desenvolvedoras");  
        }  
        catch (Exception)  
        {  
            // Logger.LogInformation("Erro ao excluir desenvolvedora!");  
        }  
    }  

    private async Task AvaliarDesenvolvedora()  
    {  
        await desenvolvedoraAPI.AvaliaDesenvolvedoraAsync(Desenvolvedora!.Id, Classificacao);  
    }  
}